<section class="hero is-small">
  <div class="hero-body">
    <div class="container">
      <h1 class="title has-text-centered">
        面会ルーム
      </h1>
    </div>
  </div>
</section>

<section class="section">
  <div class="container">
    <div class="room">
      <div class="has-text-centered">
        <video id="js-local-stream"></video>
        <span id="js-room-mode"></span>
        <p class="column is-three-fifths is-offset-one-fifth control">
          <input class="input is-medium is-warning has-text-weight-semibold" type="text" placeholder="Room Name" id="js-room-id">
         </p> 
        <button id="js-join-trigger" class="button is-success is-large is-rounded has-text-weight-semibold">面会開始</button>&emsp;
        <button id="js-leave-trigger" class="button is-danger is-large is-rounded has-text-weight-semibold">退室する</button>
      </div><br>

      <div class="remote-streams" id="js-remote-streams"></div>
        <div class="has-text-centered">
          <pre class="messages" id="js-messages"></pre>
          <input class="input is-medium is-info has-text-weight-semibold" type="text" placeholder="メッセージを入力して下さい" id="js-local-text">
          <p class="has-text-right has-text-weight-semibold">
            *メッセージを送信することができます。
          </p>
          <button id="js-send-trigger" class="button is-info is-large is-rounded has-text-weight-semibold">送信する</button>
        </div>
      </div><br>
      <p class="meta" id="js-meta"></p>
    </div>
</section>

<script src="//cdn.webrtc.ecl.ntt.com/skyway-latest.js"></script>
<script>
  const Peer = window.Peer;

  (async function main() {
    const localVideo = document.getElementById('js-local-stream');
    const joinTrigger = document.getElementById('js-join-trigger');
    const leaveTrigger = document.getElementById('js-leave-trigger');
    const remoteVideos = document.getElementById('js-remote-streams');
    const roomId = document.getElementById('js-room-id');
    const roomMode = document.getElementById('js-room-mode');
    const localText = document.getElementById('js-local-text');
    const sendTrigger = document.getElementById('js-send-trigger');
    const messages = document.getElementById('js-messages');
    const meta = document.getElementById('js-meta');
    const sdkSrc = document.querySelector('script[src*=skyway]');
  
    meta.innerText = `
      UA: ${navigator.userAgent}
      SDK: ${sdkSrc ? sdkSrc.src : 'unknown'}
    `.trim();
  
    const getRoomModeByHash = () => (location.hash === '#sfu' ? 'sfu' : 'mesh');
  
    roomMode.textContent = getRoomModeByHash();
    window.addEventListener(
      'hashchange',
      () => (roomMode.textContent = getRoomModeByHash())
    );
  
    const localStream = await navigator.mediaDevices
      .getUserMedia({
        audio: true,
        video: true,
      })
      .catch(console.error);
  
    // Render local stream
    localVideo.muted = true;
    localVideo.srcObject = localStream;
    localVideo.playsInline = true;
    await localVideo.play().catch(console.error);
  
    // eslint-disable-next-line require-atomic-updates
    const peer = (window.peer = new Peer({
      key: "56ce0219-dc92-4ccb-98e3-4fe9bc9be693",
      debug: 3,
    }));
  
    // Register join handler
    joinTrigger.addEventListener('click', () => {
      // Note that you need to ensure the peer has connected to signaling server
      // before using methods of peer instance.
      if (!peer.open) {
        return;
      }
  
      const room = peer.joinRoom(roomId.value, {
        mode: getRoomModeByHash(),
        stream: localStream,
      });
  
      room.once('open', () => {
        messages.textContent += '=== 入室しました ===\n';
      });
      room.on('peerJoin', peerId => {
        messages.textContent += `=== ${peerId} joined ===\n`;
      });
  
      // Render remote stream for new peer join in the room
      room.on('stream', async stream => {
        const newVideo = document.createElement('video');
        newVideo.srcObject = stream;
        newVideo.playsInline = true;
        // mark peerId to find it later at peerLeave event
        newVideo.setAttribute('data-peer-id', stream.peerId);
        remoteVideos.append(newVideo);
        await newVideo.play().catch(console.error);
      });
  
      room.on('data', ({ data, src }) => {
        // Show a message sent to the room and who sent
        messages.textContent += `${src}: ${data}\n`;
      });
  
      // for closing room members
      room.on('peerLeave', peerId => {
        const remoteVideo = remoteVideos.querySelector(
          `[data-peer-id="${peerId}"]`
        );
        remoteVideo.srcObject.getTracks().forEach(track => track.stop());
        remoteVideo.srcObject = null;
        remoteVideo.remove();
  
        messages.textContent += `=== ${peerId} left ===\n`;
      });
  
      // for closing myself
      room.once('close', () => {
        sendTrigger.removeEventListener('click', onClickSend);
        messages.textContent += '== 退室しました ===\n';
        Array.from(remoteVideos.children).forEach(remoteVideo => {
          remoteVideo.srcObject.getTracks().forEach(track => track.stop());
          remoteVideo.srcObject = null;
          remoteVideo.remove();
        });
      });
  
      sendTrigger.addEventListener('click', onClickSend);
      leaveTrigger.addEventListener('click', () => room.close(), { once: true });
  
      function onClickSend() {
        // Send message to all of the peers in the room via websocket
        room.send(localText.value);
  
        messages.textContent += `${peer.id}: ${localText.value}\n`;
        localText.value = '';
      }
    });
  
    peer.on('error', console.error);
  })();
</script>